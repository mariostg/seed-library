# Generated by Django 5.1.3 on 2024-12-16 18:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Color",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("color", models.CharField(blank=True, max_length=25, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Dormancy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("dormancy", models.CharField(blank=True, max_length=50)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Habit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("habit", models.CharField(blank=True, max_length=30, unique=True)),
            ],
            options={
                "ordering": ["habit"],
            },
        ),
        migrations.CreateModel(
            name="HarvestingIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("harvesting_indicator", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["harvesting_indicator"],
            },
        ),
        migrations.CreateModel(
            name="HarvestingMean",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("harvesting_mean", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "ordering": ["harvesting_mean"],
            },
        ),
        migrations.CreateModel(
            name="Lighting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("lighting", models.CharField(blank=True, max_length=45, unique=True)),
                ("definition", models.CharField(blank=True, max_length=75)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OneCultivar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("one_cultivar", models.CharField(blank=True, max_length=125)),
            ],
            options={
                "ordering": ["one_cultivar"],
            },
        ),
        migrations.CreateModel(
            name="PackagingMeasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("packaging_measure", models.CharField(blank=True, max_length=35)),
            ],
            options={
                "ordering": ["packaging_measure"],
            },
        ),
        migrations.CreateModel(
            name="SeedHead",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("seed_head", models.CharField(blank=True, max_length=20)),
            ],
            options={
                "ordering": ["seed_head"],
            },
        ),
        migrations.CreateModel(
            name="SeedPreparation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("seed_preparation", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "ordering": ["seed_preparation"],
            },
        ),
        migrations.CreateModel(
            name="SeedStorage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("seed_storage", models.CharField(blank=True, max_length=150)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SeedStorageLabelInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "seed_storage_label_info",
                    models.CharField(blank=True, max_length=50),
                ),
            ],
            options={
                "ordering": ["seed_storage_label_info"],
            },
        ),
        migrations.CreateModel(
            name="SharingPriority",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("sharing_priority", models.CharField(blank=True, max_length=75)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SoilHumidity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("soil_humidity", models.CharField(blank=True, max_length=45)),
                ("definition", models.CharField(blank=True, max_length=75)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SowingDepth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("sowing_depth", models.CharField(blank=True, max_length=25)),
            ],
            options={
                "ordering": ["sowing_depth"],
            },
        ),
        migrations.CreateModel(
            name="ViablityTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("viability_test", models.CharField(blank=True, max_length=150)),
            ],
            options={
                "ordering": ["viability_test"],
            },
        ),
        migrations.CreateModel(
            name="ProjectUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PlantProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("latin_name", models.CharField(max_length=75, unique=True)),
                ("english_name", models.CharField(blank=True, max_length=75)),
                ("french_name", models.CharField(blank=True, max_length=75)),
                ("url", models.CharField(blank=True, max_length=250)),
                (
                    "bloom_start",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "bloom_end",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "min_height",
                    models.SmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "max_height",
                    models.SmallIntegerField(blank=True, default=0, null=True),
                ),
                ("size", models.CharField(blank=True, max_length=35)),
                ("stratification_detail", models.CharField(blank=True, max_length=55)),
                (
                    "stratification_duration",
                    models.SmallIntegerField(blank=True, default=0, null=True),
                ),
                ("sowing_period", models.CharField(blank=True, max_length=55)),
                (
                    "harvesting_start",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "harvesting_end",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "remove_non_seed_material",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("hyperlink", models.CharField(blank=True, max_length=200)),
                ("envelope_label_link", models.CharField(blank=True, max_length=200)),
                ("harvesting_video_link", models.CharField(blank=True, max_length=200)),
                ("seed_picture_link", models.CharField(blank=True, max_length=200)),
                (
                    "pods_seed_head_picture_link",
                    models.CharField(blank=True, max_length=200),
                ),
                ("notes", models.CharField(blank=True, max_length=450)),
                (
                    "germinate_easy",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "rock_garden",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "rain_garden",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "pond_edge",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "shoreline_rehab",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "container_suitable",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "ground_cover",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "garden_edge",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "woodland_garden",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "wind_break_hedge",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "erosion_control",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "seed_availability",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "keystones_species",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "draught_tolerent",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "salt_tolerent",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "deer_tolerent",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "easy_to_contain",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "dormancy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.dormancy",
                    ),
                ),
                (
                    "flower_color",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.color",
                    ),
                ),
                (
                    "habit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.habit",
                    ),
                ),
                (
                    "harvesting_indicator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.harvestingindicator",
                    ),
                ),
                (
                    "harvesting_mean",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.harvestingmean",
                    ),
                ),
                (
                    "light_from",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="light_from",
                        to="project.lighting",
                    ),
                ),
                (
                    "light_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="light_to",
                        to="project.lighting",
                    ),
                ),
                (
                    "one_cultivar",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.onecultivar",
                    ),
                ),
                (
                    "packaging_measure",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.packagingmeasure",
                    ),
                ),
                (
                    "seed_head",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.seedhead",
                    ),
                ),
                (
                    "seed_preparation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.seedpreparation",
                    ),
                ),
                (
                    "seed_storage",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.seedstorage",
                    ),
                ),
                (
                    "seed_storage_label_info",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.seedstoragelabelinfo",
                    ),
                ),
                (
                    "sharing_priority",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.sharingpriority",
                    ),
                ),
                (
                    "soil_humidity_max",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="soil_humidity_max",
                        to="project.soilhumidity",
                    ),
                ),
                (
                    "soil_humidity_min",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="soil_humidity_min",
                        to="project.soilhumidity",
                    ),
                ),
                (
                    "sowing_depth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.sowingdepth",
                    ),
                ),
                (
                    "viability_test",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="project.viablitytest",
                    ),
                ),
            ],
            options={
                "ordering": ["latin_name"],
            },
        ),
    ]
